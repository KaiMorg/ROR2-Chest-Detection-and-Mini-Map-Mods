using UnityEngine;
using System.Collections.Generic;
using System.Drawing;  // For image processing
using System.IO;       // For model loading
using OpenCvSharp;     // For using YOLO and image processing (requires OpenCvSharp library)

public class ObjectDetectionMod : MonoBehaviour
{
    private MinimapController minimapController;
    private Dictionary<Vector3, bool> detectedChests = new Dictionary<Vector3, bool>();

    private float scanInterval = 0.5f;
    private float scanTimer = 0f;
    
    // YOLO-related variables
    private Net yoloNet;
    private const string yoloConfig = "yolov3.cfg";     // Path to YOLO configuration file
    private const string yoloWeights = "yolov3.weights"; // Path to YOLO weights

    void Start()
    {
        minimapController = FindObjectOfType<MinimapController>();
        LoadYOLOModel();
    }

    void Update()
    {
        scanTimer += Time.deltaTime;
        
        if (scanTimer >= scanInterval)
        {
            scanTimer = 0f;
            DetectObjects();
        }
        
        UpdateMarkers();
    }

    private void LoadYOLOModel()
    {
        yoloNet = CvDnn.ReadNetFromDarknet(yoloConfig, yoloWeights);
        yoloNet.SetPreferableBackend(Net.Backend.OPENCV);
        yoloNet.SetPreferableTarget(Net.Target.CPU); // Use CPU to maintain performance
        
        Debug.Log("YOLO model loaded for object detection.");
    }

    private void DetectObjects()
    {
        using (var frame = CaptureScreen())
        {
            var inputBlob = CvDnn.BlobFromImage(frame, 1 / 255.0, new Size(416, 416), new Scalar(), true, false);
            yoloNet.SetInput(inputBlob);
            
            var detections = yoloNet.Forward();
            ProcessDetections(detections, frame.Size());
        }
    }

    // Capture screen and convert to OpenCV Mat for processing
    private Mat CaptureScreen()
    {
        Texture2D screenTexture = ScreenCapture.CaptureScreenshotAsTexture();
        byte[] imageData = screenTexture.EncodeToPNG();
        Destroy(screenTexture);
        
        return Cv2.ImDecode(imageData, ImreadModes.Color);
    }

    private void ProcessDetections(Mat detections, Size frameSize)
    {
        for (int i = 0; i < detections.Rows; i++)
        {
            float confidence = detections.At<float>(i, 4);
            if (confidence > 0.5) // Set confidence threshold
            {
                // Extract bounding box coordinates and scale them to the game world
                float x = detections.At<float>(i, 0) * frameSize.Width;
                float y = detections.At<float>(i, 1) * frameSize.Height;
                Vector3 chestPosition = new Vector3(x, 0, y); // Convert to game world coordinates

                if (!detectedChests.ContainsKey(chestPosition) && VerifyChestInGameFiles(chestPosition))
                {
                    detectedChests[chestPosition] = true;
                    minimapController.AddMarker(chestPosition);
                    Debug.Log("Chest detected by YOLO and marker added.");
                }
            }
        }
    }

    private bool VerifyChestInGameFiles(Vector3 position)
    {
        Debug.Log($"Verifying chest presence at {position}");
        return true; // Placeholder for actual verification
    }

    private void UpdateMarkers()
    {
        List<Vector3> markersToRemove = new List<Vector3>();

        foreach (var chestPosition in detectedChests.Keys)
        {
            if (IsChestOpened(chestPosition))
            {
                markersToRemove.Add(chestPosition);
                minimapController.RemoveMarker(chestPosition);
                Debug.Log("Chest opened, marker removed.");
            }
        }

        foreach (var position in markersToRemove)
        {
            detectedChests.Remove(position);
        }
    }

    private bool IsChestOpened(Vector3 position)
    {
        return false; // Placeholder for checking if the chest is opened
    }
}

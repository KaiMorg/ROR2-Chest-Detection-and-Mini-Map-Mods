using UnityEngine;
using System.Collections.Generic;
using OpenCvSharp;     // For using YOLO and image processing (requires OpenCvSharp library)
using myGameNameSpace;         // Import for minimap functionalities

namespace myGameNameSpace
{
    // ObjectDetectionMod handles the detection and marking of chests on the minimap
    public class ObjectDetectionMod : MonoBehaviour
    {
        // Dictionary to track detected chests and prevent duplicate markings
        private Dictionary<Vector3, bool> detectedChests = new Dictionary<Vector3, bool>();

        // Interval for scanning for chests in seconds
        private float scanInterval = 0.5f;
        private float scanTimer = 0f;

        // YOLO model-related variables
        private Net yoloNet;
        private const string yoloConfig = "yolov3.cfg";     // Configuration file for YOLO
        private const string yoloWeights = "yolov3.weights"; // Pre-trained weights file for YOLO

        

        // Start is called before the first frame update
        void Start()
        {
            // Locate and assign the MinimapController instance in the scene
            minimapController = FindObjectOfType<MinimapController>();      // Switch this to work in tandem with minimap.cs

            // Load the YOLO model for object detection
            LoadYOLOModel();
        }

        // Update is called once per frame
        void Update()
        {
            // Increment the timer by the time elapsed since the last frame
            scanTimer += Time.deltaTime;

            // Perform object detection if the scan interval has elapsed
            if (scanTimer >= scanInterval)
            {
                scanTimer = 0f;       // Reset timer
                DetectObjects();       // Detect objects in the frame
                UpdateMarkers();       // Update minimap markers
            }
        }

        // Load the YOLO model using the configuration and weights files
        private void LoadYOLOModel()
        {
            yoloNet = CvDnn.ReadNetFromDarknet(yoloConfig, yoloWeights);
            yoloNet.SetPreferableBackend(Net.Backend.OPENCV); // Set OpenCV as the backend
            yoloNet.SetPreferableTarget(Net.Target.CPU);      // Use CPU for inference
            Debug.Log("YOLO model loaded for object detection.");
        }

        // Detect objects using YOLO model on the captured frame
        private void DetectObjects()
        {
            using (var frame = CaptureScreen())
            {
                // Create a blob from the image to feed into YOLO
                var inputBlob = CvDnn.BlobFromImage(frame, 1 / 255.0, new Size(416, 416), new Scalar(), true, false);
                yoloNet.SetInput(inputBlob);

                // Run the YOLO network forward pass to get detections
                var detections = yoloNet.Forward();
                ProcessDetections(detections, frame.Size()); // Process the detected objects
            }
        }

        // Capture a screenshot of the screen and convert it to an OpenCV Mat
        private Mat CaptureScreen()
        {
            Texture2D screenTexture = ScreenCapture.CaptureScreenshotAsTexture(); // Capture screenshot
            byte[] imageData = screenTexture.EncodeToPNG();                       // Convert to PNG format
            Destroy(screenTexture);                                               // Destroy Texture2D to free memory

            return Cv2.ImDecode(imageData, ImreadModes.Color);                    // Decode image data to OpenCV Mat
        }

        // Process the detections from YOLO to identify chests and place markers
        private void ProcessDetections(Mat detections, Size frameSize)
        {
            // Iterate through each detection to find chests
            for (int i = 0; i < detections.Rows; i++)
            {
                float confidence = detections.At<float>(i, 4); // Confidence score for detection

                if (confidence > 0.8) // Filter out low-confidence detections
                {
                    float x = detections.At<float>(i, 0) * frameSize.Width;
                    float y = detections.At<float>(i, 1) * frameSize.Height;

                    Vector3 chestPosition = new Vector3(x, 0, y);
                    
                    // If the chest isn't already marked, verify it and add to minimap
                    if (!detectedChests.ContainsKey(chestPosition) && VerifyChestInGameFiles(chestPosition))
                    {
                        detectedChests[chestPosition] = true; // Mark as detected
                        MinimapLogic.CreateChestMarker(chestPosition); // Add to minimap
                        Debug.Log("Chest detected and marker added.");
                    }
                }
            }
        }

        // Verify if a chest exists in game files at a specific position
        private bool VerifyChestInGameFiles(Vector3 position)
        {
            Debug.Log($"Verifying chest presence at {position}");
            // Placeholder for verification with actual game data
            return true;
        }

        // Update minimap markers by removing those for opened chests
        private void UpdateMarkers()
        {
            List<Vector3> markersToRemove = new List<Vector3>(); // List to track markers for removal
            
            // Check each detected chest's status
            foreach (var chestPosition in detectedChests.Keys)
            {
                if (IsChestOpened(chestPosition)) // If chest is opened, mark for removal
                {
                    markersToRemove.Add(chestPosition);
                    minimapController.RemoveMarker(chestPosition); // Remove marker from minimap
                    Debug.Log("Chest opened, marker removed.");
                }
            }

            // Remove opened chests from the detected list
            foreach (var position in markersToRemove)
            {
                detectedChests.Remove(position);
            }
        }

        // Determine if a chest is opened based on proximity to player
        private bool IsChestOpened(Vector3 position)
        {
            // Placeholder logic: Checks if player is within 3 meters of the chest
            Vector3 playerPosition = GetPlayerPosition(); // Get player position
            if (Vector3.Distance(playerPosition, position) < 3.0f)
            {
                Debug.Log("Chest at " + position + " assumed opened due to proximity.");
                return true;
            }
            return false;
        }

        // Placeholder method to get the player's position in the game world
        private Vector3 GetPlayerPosition()
        {
            // Replace with actual method for retrieving player's position in-game
            return new Vector3(0, 0, 0);
        }
    }
}
